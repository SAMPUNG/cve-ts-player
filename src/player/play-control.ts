import { emitUIInteraction } from '../liaison/emitter'
import { createWebSocket, ws } from '../liaison/web-socket'
import { player } from '../player/custom-element'
import { emitDebugEvent, emitEvent } from '../player/emitter'
import { onResizePlayerStyle } from '../style/events'
import { debounce } from '../utils/debounce'
import { setVideoEnabled } from '../video/controls'

import { getPixelStreamingInstance } from './pixel-streaming'

export function change(sceneName?: string) {
  const SceneName = sceneName ?? player?.getAttribute('scene-name')
  if (SceneName) {
    emitUIInteraction({ Command: 'SwitchToCustomScene', Data: SceneName })
  }
}

export function open(levelName?: string, sceneName?: string) {
  const LevelName = levelName ?? player?.getAttribute('level-name')
  const SceneName = sceneName ?? player?.getAttribute('scene-name')
  if (LevelName && SceneName) {
    const Data = { LevelName, SceneName }
    emitUIInteraction({ Command: 'OpenLevel', Data })
  }
}

export const run = debounce(() => {
  if (!player?.isConnected) {
    return
  }

  const name = player.getAttribute('application-name')
  if (!name) {
    return
  }

  const url = player.url.replace(/\/$/, '')
  const source = `${url}/GetPixelStreamingInstance?ApplicationName=${name}`
  const before = player.getAttribute('data-source')
  if (source === before) {
    return
  } else {
    player.setAttribute('data-source', source)
  }

  getPixelStreamingInstance(source)
    .then((target) => {
      if (!target) {
        return
      }
      player?.setAttribute('data-target', target)
      start(target)
    })
    .catch((message) => {
      const evt = new ErrorEvent('error', { message })
      emitEvent(evt)
    })
})

export let reconnecting: boolean = false
export function reconnect(enable: boolean = true) {
  reconnecting = enable
}

export function start(url: string) {
  if (!player?.isConnected) {
    return
  }

  if (reconnecting) {
    setVideoEnabled(true)
    onResizePlayerStyle()
  }
  emitDebugEvent('start', reconnecting)
  emitDebugEvent('kick', 0)

  createWebSocket(url)
}

export function stop() {
  if (!player?.isConnected) {
    return
  }

  ws?.close()
  player.disconnectedCallback()
}
