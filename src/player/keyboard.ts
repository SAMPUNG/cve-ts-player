import {
  InputOptions,
  MessageType,
  SpecialKeyCodes,
} from '@cve-ts/dictionary'
import { send } from '../liaison/emitter'

// We want to be able to differentiate between left and right versions of some keys.
function getKeyCode(e: KeyboardEvent) {
  if (e.keyCode === SpecialKeyCodes.Shift && e.code === 'ShiftRight')
    return SpecialKeyCodes.RightShift
  if (e.keyCode === SpecialKeyCodes.Control && e.code === 'ControlRight') {
    return SpecialKeyCodes.RightControl
  }
  if (e.keyCode === SpecialKeyCodes.Alt && e.code === 'AltRight')
    return SpecialKeyCodes.RightAlt
  return e.keyCode
}

/**
 * Browser keys do not have a charCode so we only need to test keyCode.
 *
 * keys or tab key.
 * */
function isKeyCodeBrowserKey(keyCode: number) {
  return (keyCode >= 112 && keyCode <= 123) || keyCode === 9
}

export function registerKeyboardEvents() {
  document.onkeydown = (e) => {
    const data = [MessageType.KeyDown, getKeyCode(e), e.repeat ? 1 : 0]
    send(new Uint8Array(data).buffer)
    // Backspace is not considered a keypress in JavaScript but we need it
    // to be so characters may be deleted in a UE4 text entry field.
    if (e.keyCode === SpecialKeyCodes.BackSpace) {
      const ev = new KeyboardEvent('keydown', {
        charCode: SpecialKeyCodes.BackSpace,
      })
      document.onkeypress?.(ev)
    }
    if (InputOptions.SuppressBrowserKeys && isKeyCodeBrowserKey(e.keyCode)) {
      e.preventDefault()
    }
  }

  document.onkeyup = (e) => {
    send(new Uint8Array([MessageType.KeyUp, getKeyCode(e)]).buffer)
    if (InputOptions.SuppressBrowserKeys && isKeyCodeBrowserKey(e.keyCode)) {
      e.preventDefault()
    }
  }

  document.onkeypress = (e) => {
    const data = new DataView(new ArrayBuffer(3))
    data.setUint8(0, MessageType.KeyPress)
    data.setUint16(1, e.charCode, true)
    send(data.buffer)
  }
}
