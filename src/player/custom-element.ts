import audio from '../audio'
import wrapper from '../wrapper/element'
import style from '../style/element'

import { emitUIInteraction } from '../liaison/emitter'
import { disposeResizeEvents, registerResizeEvents } from '../style/events'
import { resize } from '../style/resolution'

import { emitDebugEvent } from './emitter'
import { disposeGamepadEvents, registerGamepadEvents } from './gamepad'
import { registerKeyboardEvents } from './keyboard'
import { change, open, run } from './play-control'

export function getBooleanAttribute(key: string): boolean {
  const value = player?.getAttribute(key)
  return value === '' || value === 'true' || value === key
}

export let player: CvePlayer | undefined

export class CvePlayer extends HTMLElement {
  declare ondebug?: (evt: CustomEvent<unknown>) => void
  declare onmeasure?: (evt: CustomEvent<unknown>) => void
  declare onmessage?: (evt: CustomEvent<unknown>) => void
  declare onpick?: (evt: CustomEvent<unknown>) => void
  declare onstart?: (evt: CustomEvent<number>) => void
  declare onstop?: (evt: CustomEvent<string>) => void

  constructor() {
    super()

    player = this
  }

  attributeChangedCallback(key: string, from?: string, to?: string) {
    console.log(
      '%c[ce]',
      'background: ivory; color: black',
      'Attribute Changed ===> ',
      key,
      from,
      to
    )
    switch (key) {
      case 'application-name':
      case 'url': {
        run()
        break
      }
      case 'aspect-ratio': {
        resize()
        break
      }
      case 'level-name': {
        open(to)
        break
      }
      case 'scene-name': {
        change(to)
        break
      }
      case 'ondebug':
      case 'onmeasure':
      case 'onmessage':
      case 'onpick':
      case 'onstart':
      case 'onstop': {
        const type = key.replace(/^on/, '')
        if (typeof to === 'function') {
          this.addEventListener(type, to)
        } else if (typeof from === 'function') {
          this.removeEventListener(type, from)
        }
        break
      }
      case 'volume': {
        emitUIInteraction({ Command: 'SetVolume', Data: to })
        break
      }
      default: {
        emitDebugEvent('change', { key, to, from })
      }
    }
  }

  connectedCallback() {
    audio.autoplay = getBooleanAttribute('autoplay') ?? false
    this.appendChild(wrapper)
    this.appendChild(style)

    registerGamepadEvents()
    registerKeyboardEvents()
    registerResizeEvents()

    if (getBooleanAttribute('use-mic')) {
      let isLocalhostConnection =
        location.hostname === 'localhost' || location.hostname === '127.0.0.1'
      let isHttpsConnection = location.protocol === 'https:'
      if (!isLocalhostConnection && !isHttpsConnection) {
        this.toggleAttribute('use-mic', false)
      }
    }
  }

  disconnectedCallback() {
    disposeGamepadEvents()
    disposeResizeEvents()
  }

  get height() {
    return Number(this.getAttribute('height'))
  }
  set height(value: number) {
    this.setAttribute('height', value.toFixed(0))
  }

  static get observedAttributes() {
    return [
      'application-name',
      'aspect-ratio',
      'level-name',

      'ondebug',
      'onmeasure',
      'onmessage',
      'onpick',
      'onstart',
      'onstop',

      'scene-name',
      'url',
      'volume',
    ]
  }

  get ready() {
    return this.hasAttribute('ready')
  }
  set ready(value: boolean) {
    this.toggleAttribute('ready', value)
  }

  get url() {
    return this.getAttribute('url') || 'http://localhost:80'
  }
  set url(value: string) {
    this.setAttribute('url', value)
  }

  get volume() {
    return Number(this.getAttribute('volume') && 0.3)
  }
  set volume(value: number) {
    this.setAttribute('width', value.toFixed(1))
  }

  get width() {
    return Number(this.getAttribute('width'))
  }
  set width(value: number) {
    this.setAttribute('width', value.toFixed(0))
  }
}

const TAG = 'cve-player'

if (!customElements.get(TAG)) {
  customElements.define(TAG, CvePlayer)
}
