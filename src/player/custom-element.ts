import audio from '../audio'
import wrapper from '../wrapper/element'
import style from '../style/element'

import { emitUIInteraction } from '../liaison/emitter'
import { disposeResizeEvents, registerResizeEvents } from '../style/events'
import { resize } from '../style/resolution'

import { emitDebugEvent } from './emitter'
import { disposeGamepadEvents, registerGamepadEvents } from './gamepad'
import { registerKeyboardEvents } from './keyboard'
import { open, run } from './play-control'

export function getBooleanAttribute(key: string): boolean {
  const value = player?.getAttribute(key)
  return value === '' || value === 'true' || value === key
}

export let player: CvePlayer | undefined

export class CvePlayer extends HTMLElement {
  declare onconnect?: (evt: CustomEvent<number>) => void
  declare ondebug?: (evt: CustomEvent<unknown>) => void
  declare ondisconnect?: (evt: CustomEvent<string>) => void
  declare oninit?: (evt: CustomEvent<unknown>) => void
  declare onmeasure?: (evt: CustomEvent<unknown>) => void
  declare onpick?: (evt: CustomEvent<unknown>) => void
  declare onreject?: (evt: CustomEvent<string>) => void
  declare onrender?: (evt: CustomEvent<unknown>) => void

  declare origin: string
  declare ready: boolean
  declare volume: number

  constructor() {
    super()

    player = this

    this.origin = 'http://localhost:80'
    this.ready = false
    this.volume = 0.3
  }

  attributeChangedCallback(key: string, from?: string, to?: string) {
    console.log(
      '%c[ce]',
      'background: ivory; color: black',
      'Attribute Changed ===> ',
      key,
      from,
      to
    )
    switch (key) {
      case 'application-name':
      case 'origin': {
        run()
        break
      }
      case 'aspect-ratio': {
        resize()
        break
      }
      case 'level-name':
      case 'scene-name': {
        open()
        break
      }
      case 'onconnect':
      case 'ondebug':
      case 'ondisconnect':
      case 'oninit':
      case 'onmeasure':
      case 'onpick':
      case 'onrender':
      case 'onreject': {
        const type = key.replace(/^on/, '')
        if (typeof to === 'function') {
          this.addEventListener(type, to)
        } else if (typeof from === 'function') {
          this.removeEventListener(type, from)
        }
        break
      }
      case 'volume': {
        emitUIInteraction({ Command: 'SetVolume', Data: to })
        break
      }
      default: {
        emitDebugEvent('change', { key, to, from })
      }
    }
  }

  connectedCallback() {
    audio.autoplay = getBooleanAttribute('autoplay') ?? false
    this.appendChild(wrapper)
    this.appendChild(style)

    registerGamepadEvents()
    registerKeyboardEvents()
    registerResizeEvents()

    if (getBooleanAttribute('use-mic')) {
      let isLocalhostConnection =
        location.hostname === 'localhost' || location.hostname === '127.0.0.1'
      let isHttpsConnection = location.protocol === 'https:'
      if (!isLocalhostConnection && !isHttpsConnection) {
        this.toggleAttribute('use-mic', false)
      }
    }
  }

  disconnectedCallback() {
    disposeGamepadEvents()
    disposeResizeEvents()
  }

  static get observedAttributes() {
    return [
      'application-name',
      'aspect-ratio',
      'level-name',
      'onconnect',
      'ondebug',
      'ondisconnect',
      'oninit',
      'onmeasure',
      'onpick',
      'onrender',
      'onreject',
      'origin',
      'scene-name',
      'volume',
    ]
  }
}

export default CvePlayer
