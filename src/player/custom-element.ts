
import audio from '../audio'
import wrapper from '../wrapper/element'
import style from '../style/element'

import { emitUIInteraction } from '../liaison/emitter'
import { resize } from '../style/resolution'
import { emitEvent } from './emitter'
import { disposePlayerEvents } from './events'
import { registerKeyboardEvents } from './keyboard'
import { open, run } from './play-control'
import { disposeGamepadEvents, registerGamepadEvents } from './gamepad'
import { disposeResizeEvents, registerResizeEvents } from '../style/events'

export function getBooleanAttribute(key: string): boolean {
  const value = player?.getAttribute(key)
  return value === '' || value === 'true' || value === key
}

export let player: CvePlayer | undefined

export default class CvePlayer extends HTMLElement {
  declare origin: string
  declare volume: number

  constructor() {
    super()

    player = this

    this.origin = 'http://localhost:80'
    this.volume = 0.3
  }

  attributeChangedCallback(key: string, from?: string, to?: string) {
    console.log('attribute changed ===> ', key, from, to)
    switch (key) {
      case 'application-name': {
        run()
        break
      }
      case 'aspect-ratio': {
        resize(to)
        break
      }
      case 'level-name': {
        open()
        break
      }
      case 'origin': {
        run()
        break
      }
      case 'scene-name': {
        open()
        break
      }
      case 'volume': {
        emitUIInteraction({ Command: 'SetVolume', Data: to })
        break
      }
      default: {
        emitEvent('change', { key, to, from })
      }
    }
  }

  connectedCallback() {
    audio.autoplay = getBooleanAttribute('autoplay') ?? false
    this.appendChild(wrapper)
    this.appendChild(style)

    registerGamepadEvents()
    registerKeyboardEvents()
    registerResizeEvents()

    if (getBooleanAttribute('use-mic')) {
      let isLocalhostConnection =
        location.hostname === 'localhost' || location.hostname === '127.0.0.1'
      let isHttpsConnection = location.protocol === 'https:'
      if (!isLocalhostConnection && !isHttpsConnection) {
        this.toggleAttribute('use-mic', false)
      }
    }
  }

  disconnectedCallback() {
    disposeGamepadEvents()
    disposePlayerEvents()
    disposeResizeEvents()
  }

  static get observedAttributes() {
    return [
      'application-name',
      'aspect-ratio',
      'origin',
      'volume',
    ]
  }
}
