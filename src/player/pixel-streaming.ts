import axios from 'axios'
import type { AxiosResponse } from 'axios'

type PixelStreamingCode = '0' | '1' | '2' | '3'
interface PixelStreamingData {
  Code: PixelStreamingCode
  Data: string | null
  Result: string
}
interface PixelStreamingQuery {
  ApplicationName: string
}
type PixelStreamingPromise = Promise<string | null>

export function getPixelStreamingInstance(name: string): PixelStreamingPromise {
  const url = `/GetPixelStreamingInstance?ApplicationName=${name}`
  return new Promise((resolve, reject) => {
    axios(url)
      .then((res: AxiosResponse<PixelStreamingData, PixelStreamingQuery>) => {
        const data: PixelStreamingData = res.data
        switch (data.Code) {
          case '0': {
            resolve(data.Data)
            break
          }
          case '3': {
            reject(data)
            break
          }
          default: {
            // When a new instance is started or is being started, the two states will be returned after 1 second to avoid frequent requests from the client.
            setTimeout(() => {
              resolve(getPixelStreamingInstance(name))
            }, 1000)
          }
        }
      })
      .catch((error: unknown) => {
        reject(error)
      })
  })
}
