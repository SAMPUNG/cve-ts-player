import style from './element'
import video from '../video/element'

import { emitUIInteraction } from '../liaison/emitter'
import { player } from '../player/custom-element'

import { onResizePlayerStyle } from './events'
import flexable from './flexable.css?raw'
import scalable from './scalable.css?raw'

const DELAY = 1000 / 16

interface SolutionData {
  Height: number
  Width: number
}

const Data: SolutionData = {
  Height: 1920,
  Width: 1080,
}
let solutionTimer: NodeJS.Timeout | undefined

export function display(width: number, height: number) {
  if (!player) {
    return
  }

  player.width = width
  player.height = height

  onResizePlayerStyle()
}

export function setAspectRatio(horizontal: number = 16, vertical: number = 9) {
  const searchValue = /aspect-ratio: (\d+) \/ (\d+)/g
  const replaceValue = `aspect-ratio: ${horizontal} / ${vertical}`

  style.textContent = scalable.replace(searchValue, replaceValue)

  console.log(`aspect-ratio ===> ${horizontal} / ${vertical}`)

  setResolutionLater()
}

export function reset() {
  display(0, 0)
}

export function resize() {
  const aspectRatio = player?.getAttribute('aspect-ratio')

  if (typeof aspectRatio === 'string') {
    const values = aspectRatio.replace(/\s/g, '').split('/')

    if (values.length > 1) {
      const horizontal: number = Number(values[0])
      const vertical: number = Number(values[1])

      setAspectRatio(horizontal, vertical)

      return
    }
  }

  style.textContent = flexable
  setResolutionLater()
}

export function setResolution() {
  if (!player?.ready) {
    return
  }

  const height = player.height || video.clientHeight
  const width = player.width || video.clientWidth

  if (height === Data.Height && width === Data.Width) {
    return
  }

  Data.Height = height
  Data.Width = width

  emitUIInteraction({ Command: 'SetResolution', Data })
}

export function setResolutionLater(delay: number = DELAY) {
  if (solutionTimer) {
    clearTimeout(solutionTimer)
  }

  solutionTimer = setTimeout(setResolution, delay)
}
