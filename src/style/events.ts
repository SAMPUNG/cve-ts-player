import { video } from '../video/element'
import wrapper from '../wrapper/element'

import { player } from '../player/custom-element'
import { emitDebugEvent } from '../player/emitter'
import { css } from '../video/events'
import { setupMouseAndFreezeFrame } from '../wrapper/coords'

import { resize } from './resolution'

export function disposeResizeEvents() {
  window.removeEventListener('resize', onResizePlayerStyle, true)
  window.removeEventListener('orientationchange', onOrientationChangeHandler)
}

let orientationTimer: NodeJS.Timeout | undefined
export function onOrientationChangeHandler() {
  if (orientationTimer) {
    clearTimeout(orientationTimer)
  }
  orientationTimer = setTimeout(onResizePlayerStyle, 500)
}

export function onResizePlayerStyle() {
  if (!player?.isConnected) {
    return
  }

  if (wrapper.classList.contains('fixed-size')) {
    setupMouseAndFreezeFrame()
    return
  }

  const windowSmallerThanPlayer =
  player.offsetWidth < video.videoWidth ||
  player.offsetHeight < video.videoHeight
  if (windowSmallerThanPlayer) {
    resizeToFillWindow()
  } else {
    resizeToActualSize()
  }

  resize()

  setupMouseAndFreezeFrame()

  emitDebugEvent('resize', Date.now())
}

export function registerResizeEvents() {
  window.addEventListener('resize', onResizePlayerStyle, true)
  window.addEventListener('orientationchange', onOrientationChangeHandler)
}

function resizeToActualSize() {
  if (!player) {
    return
  }
  // Display image in its actual size
  css.width = video.videoWidth
  css.height = video.videoHeight
  const Top = Math.floor((player.offsetHeight - css.height) * 0.5)
  const Left = Math.floor((player.offsetWidth - css.width) * 0.5)
  css.top = Top > 0 ? Top : 0
  css.left = Left > 0 ? Left : 0
}

function resizeToFillWindow() {
  if (!player) {
    return
  }
  // Fill the player display in window, keeping picture"s aspect ratio.
  const windowAspectRatio = player.offsetWidth / player.offsetHeight
  // const windowAspectRatio = window.innerHeight / window.innerWidth;
  const playerAspectRatio =
  wrapper.clientHeight / wrapper.clientWidth
  // We want to keep the video ratio correct for the video stream
  const videoAspectRatio =
    video.videoHeight / video.videoWidth
  if (Number.isNaN(videoAspectRatio)) {
    // Video is not initialised yet so set playerElement to size of window
    css.width = player.offsetWidth
    css.height = player.offsetHeight
    css.top = 0
    css.left = 0
  } else if (windowAspectRatio < playerAspectRatio) {
    // Window height is the constraining factor so to keep aspect ratio change width appropriately
    css.width = Math.floor(player.offsetWidth / videoAspectRatio)
    css.height = player.offsetHeight
    css.top = 0
    css.left = Math.floor((player.offsetWidth - css.width) * 0.5)
    // Video is now 100% of the playerElement, so set the playerElement style
  } else {
    // Window width is the constraining factor so to keep aspect ratio change height appropriately
    css.width = player.offsetWidth
    css.height = Math.floor(player.offsetWidth * videoAspectRatio)
    css.top = Math.floor((player.offsetHeight - css.height) * 0.5)
    css.left = Math.floor((player.offsetWidth - css.width) * 0.5)
    // Video is now 100% of the playerElement, so set the playerElement style
  }
}

