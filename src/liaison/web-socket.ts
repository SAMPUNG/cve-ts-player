import { ControlSchemeType, InputOptions } from '@cve-ts/dictionary'
import { getBooleanAttribute } from '../player/custom-element'
import { emitEvent } from '../player/emitter'
import { onResizePlayerStyle } from '../style/events'
import {
  registerHoveringMouseEvents,
  registerLockedMouseEvents,
  registerMouseEnterAndLeaveEvents,
  registerTouchEvents,
} from '../video/events'
import { reconnect, start } from '../player/play-control'
import {
  createOffer,
  onWebRtcAnswer,
  pc,
  updatePeerConnection,
} from './peer-connection'

interface ParOptions {
  autoPlayAudio?: boolean
  startVideoMuted?: boolean
  bundlePolicy?: RTCIceTransportPolicy
  iceTransportPolicy?: RTCIceTransportPolicy
  peerConnectionOptions?: RTCConfiguration 
}

export let ws: WebSocket | undefined

export function createWebSocket(url: string) {
  const GlobalWebSocket = window.WebSocket || window.MozWebSocket

  if (!GlobalWebSocket) {
    alert("Your browser doesn't support WebSocket")
    return
  }

  ws = new GlobalWebSocket(
    url.replace('http://', 'ws://').replace('https://', 'wss://')
  )

  ws.onmessage = (event) => {
    const msg = JSON.parse(event.data)
    switch (msg.type) {
      case 'config': {
        onConfig(msg)
        break
      }
      case 'playerCount': {
        emitEvent('kick', msg.count - 1)
        break
      }
      case 'answer': {
        onWebRtcAnswer(msg as RTCSessionDescriptionInit)
        break
      }
      default: {
      }
    }
  }

  ws.onclose = (event) => {
    updateWebSocket()
    reconnect(false)

    pc?.close()
    updatePeerConnection()

    emitEvent('text', `Disconnected: ${event.reason}`)
    setTimeout(() => {
      start(url)
    }, 4000)
    emitEvent('disconnect', event.reason)
  }
}

export function onConfig(options: ParOptions) {
  const config: RTCConfiguration = options.peerConnectionOptions ?? {
    bundlePolicy: getBooleanAttribute('force-max-bundle')
      ? 'max-bundle'
      : 'balanced',
    iceTransportPolicy: getBooleanAttribute('force-max-bundle')
      ? 'relay'
      : 'all',
  }

  emitEvent('text', `Starting connection to server, please wait`)
  emitEvent('setup', 'config')

  createOffer(config)

  onResizePlayerStyle()

  switch (InputOptions.ControlScheme) {
    case ControlSchemeType.HoveringMouse:
      registerHoveringMouseEvents()
      break
    case ControlSchemeType.LockedMouse:
      registerLockedMouseEvents()
      break
    default:
      registerLockedMouseEvents()
      break
  }

  registerMouseEnterAndLeaveEvents()
  registerTouchEvents()
}

export function updateWebSocket(socket?: WebSocket) {
  ws = socket
}
