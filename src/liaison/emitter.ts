import { MessageType } from '../dictionary'
import { emit } from '../player/emitter'
import { dc } from './data-channel'

export interface UIDescriptor {
  [x: string]: unknown
  Command?: string
  Console?: string
  Data?: unknown
  UID?: string
}

export function emitCommand(descriptor: UIDescriptor) {
  emitDescriptor(MessageType.Command, descriptor)
}

export function emitDescriptor(messageType: number, descriptor: UIDescriptor) {
  // Convert the dscriptor object into a JSON string.
  const str = JSON.stringify(descriptor)

  // Add the UTF-16 JSON string to the array byte buffer, going two bytes at
  // a time.
  const data = new DataView(new ArrayBuffer(1 + 2 + 2 * str.length))
  let byteIdx = 0
  data.setUint8(byteIdx, messageType)
  byteIdx += 1
  data.setUint16(byteIdx, str.length, true)
  byteIdx += 2
  for (let i = 0; i < str.length; i++) {
    data.setUint16(byteIdx, str.charCodeAt(i), true)
    byteIdx += 2
  }
  send(data.buffer)
}

export function emitUIInteraction(descriptor: UIDescriptor) {
  console.log('emit ui interaction ===> ', JSON.stringify(descriptor))
  emitDescriptor(MessageType.UIInteraction, descriptor)
}

export function send(data: ArrayBuffer) {
  emit('afk', 'reset')
  if (dc?.readyState == 'open') {
    dc.send(data)
  }
}
