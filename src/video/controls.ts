import { MessageType } from '@cve-ts/dictionary'
import video from './element'
import { emitUIInteraction, send } from '../liaison/emitter'
import { getBooleanAttribute, player } from '../player/custom-element'
import { emitEvent } from '../player/emitter'

let resizeTime: number
let resizeTimer: NodeJS.Timeout

export function playVideoStream() {
  video.play().catch(() => {
    emitEvent('play', 'error')
  })
  // Request Initial Settings
  send(new Uint8Array([MessageType.RequestInitialSettings]).buffer)
  // Request Quality Control
  send(new Uint8Array([MessageType.RequestQualityControl]).buffer)
  emitEvent('play', 'start')
}

export function setVideoEnabled(enabled: boolean) {
  const media = video.srcObject as MediaStream
  media.getTracks().forEach((track) => (track.enabled = enabled))
}

export function updateVideoStreamSize() {
  if (player === undefined) {
    return
  }
  if (!getBooleanAttribute('match-viewport')) {
    return
  }
  const now = new Date().getTime()
  if (now - resizeTime > 1000) {
    emitUIInteraction({
      Command: 'SetResolution',
      Data: {
        Width: player.clientWidth,
        Height: player.clientHeight,
      },
    })
    resizeTime = new Date().getTime()
  } else {
    if (resizeTimer) {
      clearTimeout(resizeTimer)
    }
    resizeTimer = setTimeout(() => {
      emitUIInteraction({
        Command: 'SetResolution',
        Data: {
          Width: player!.clientWidth,
          Height: player!.clientHeight,
        },
      })
    }, 1000)
  }
}