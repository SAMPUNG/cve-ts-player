import video from '../video/element'
import wrapper from './element'
import { emitEvent } from '../player/emitter'

export let rect: DOMRect

export function normalizeAndQuantizeSigned(x: number, y: number) {
  const playerAspectRatio = wrapper.clientHeight / wrapper.clientWidth
  const videoAspectRatio = video.videoHeight / video.videoWidth

  const ratio =
    playerAspectRatio > videoAspectRatio
      ? playerAspectRatio / videoAspectRatio
      : videoAspectRatio / playerAspectRatio
  const normalizedX =
    playerAspectRatio > videoAspectRatio
      ? x / (0.5 * wrapper.clientWidth)
      : (ratio * x) / (0.5 * wrapper.clientWidth)
  const normalizedY =
    playerAspectRatio > videoAspectRatio
      ? (ratio * y) / (0.5 * wrapper.clientHeight)
      : y / (0.5 * wrapper.clientHeight)
  return {
    x: normalizedX * 32767,
    y: normalizedY * 32767,
  }
}

export function normalizeAndQuantizeUnsigned(x: number, y: number) {
  const playerAspectRatio = wrapper.clientHeight / wrapper.clientWidth
  const videoAspectRatio = video.videoHeight / video.videoWidth

  if (playerAspectRatio > videoAspectRatio) {
    const ratio = playerAspectRatio / videoAspectRatio
    const normalizedX = x / wrapper.clientWidth
    const normalizedY = ratio * (y / wrapper.clientHeight - 0.5) + 0.5
    if (
      normalizedX < 0.0 ||
      normalizedX > 1.0 ||
      normalizedY < 0.0 ||
      normalizedY > 1.0
    ) {
      return {
        inRange: false,
        x: 65535,
        y: 65535,
      }
    }
    return {
      inRange: true,
      x: normalizedX * 65536,
      y: normalizedY * 65536,
    }
  } else {
    const ratio = videoAspectRatio / playerAspectRatio
    const normalizedX = ratio * (x / wrapper.clientWidth - 0.5) + 0.5
    const normalizedY = y / wrapper.clientHeight
    if (
      normalizedX < 0.0 ||
      normalizedX > 1.0 ||
      normalizedY < 0.0 ||
      normalizedY > 1.0
    ) {
      return {
        inRange: false,
        x: 65535,
        y: 65535,
      }
    }
    return {
      inRange: true,
      x: normalizedX * 65536,
      y: normalizedY * 65536,
    }
  }
}

export function setupMouseAndFreezeFrame() {
  // Calculating and normalizing positions depends on the width and height of the player.
  rect = wrapper.getBoundingClientRect()
  // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
  // quantized into an uint16 (0..65536).
  // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
  // quantized into an int16 (-32767..32767).
  // This allows the browser viewport and client viewport to have a different
  // size.
  // Hack: Currently we set an out-of-range position to an extreme (65535)
  // as we Can't yet accurately detect mouse enter and leave events
  // precisely inside a video with an aspect ratio which causes mattes.
  emitEvent('setup', 'freeze')
}
